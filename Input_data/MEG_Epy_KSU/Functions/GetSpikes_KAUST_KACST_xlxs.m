
%% #################      Spikes data preparation KACST    #########################
% This script prepare the data provided by KACST centers for matlab  usage 
% Please select xlsx files that have this example of  format:
% Summary of the MEG Findings-KACST –Lockheed project 									
% Patient: ­­­ EA001                            HPI#  (X: -0.5  _  Y: 11  _  Z: 43 )									
% #	SE	TIME	Spike Duration 	SENSOR	    ECD%	SPIKE LOCATION		SOURCE LOCALIZATION         MRI LOCALIZATION
% 						                             MEG   EEG			
% 1	1	171.114	171.068_171.125	RT Frontal	90%        ü	ü                RT Frontal	
% 2	1	253.492	253.476_253.547	RT Frontal	95%        ü	ü                RT Frontal	
% 3	1	291.559	291.545_291.596	RT Frontal	89%        ü	ü                RT Frontal	

%% ###########################################################################
%  Author:
%  Abderrazak Chahid (abderrazak.chahid@kasut.edu.sa)
% Done: Jan,  2019
%  
%% ###########################################################################


function [Spikes_table,Electrode,SE,Time_spike,Spike_startes,Spike_stops] = GetSpikes_KAUST_KACST_xlxs(workbookFile,sheetName,startRow,endRow)
%IMPORTFILE1 Import data from a spreadsheet
%   DATA = IMPORTFILE1(FILE) reads data from the first worksheet in the
%   Microsoft Excel spreadsheet file named FILE and returns the data as a
%   table.
%
%   DATA = IMPORTFILE1(FILE,SHEET) reads from the specified worksheet.
%
%   DATA = IMPORTFILE1(FILE,SHEET,STARTROW,ENDROW) reads from the specified
%   worksheet for the specified row interval(s). Specify STARTROW and
%   ENDROW as a pair of scalars or vectors of matching size for
%   dis-contiguous row intervals. To read to the end of the file specify an
%   ENDROW of inf.%
% Example:
%   EA001 = importfile1('EA001.xlsx','Sheet1',5,28);
%
%   See also XLSREAD.

% Auto-generated by MATLAB on 2019/01/20 11:21:51

%% Input handling

% If no sheet is specified, read first sheet
if nargin == 1 || isempty(sheetName)
    sheetName = 1;
end

% % If row start and end points are not specified, define defaults
% if nargin <= 3
%     startRow = 5;
%     endRow = 28;
% end

%% Import the data
[~, ~, raw] = xlsread(workbookFile, sheetName);%, sprintf('Q%d:Z%d',startRow(1),endRow(1)));


Sample=string(raw(6,:));
vector_Cols=find(ismissing(Sample)==0);

startCol=vector_Cols(1);

SampleR=string(raw(4:end-4,startCol));
vector_rows=find(ismissing(SampleR)==0)+3;

startRow=vector_rows(1);
endRow=vector_rows(end);

for block=2:length(startRow)
    [~, ~, tmpRawBlock] = xlsread(workbookFile, sheetName, sprintf('Q%d:Z%d',startRow(block),endRow(block)));
    raw = [raw;tmpRawBlock]; %#ok<AGROW>
end
stringVectors = string(raw(vector_rows,vector_Cols));
stringVectors(ismissing(stringVectors)) = '';
raw = raw(vector_rows,[1,2,3,6]+startCol-1);

%% Create output variable
I = cellfun(@(x) ischar(x), raw);
raw(I) = {NaN};
data = reshape([raw{:}],size(raw));

%% Create table
Spikes_table = table;

%% Allocate imported array to column variable names
Spikes_table.ID = double(stringVectors(:,1));
Spikes_table.SE =double(stringVectors(:,2));
Spikes_table.TIME = double(stringVectors(:,3));
[t0,t1]=Get_Start_Stop_Spikes(stringVectors(:,4));
Spikes_table.SpikeStart = t0;
Spikes_table.SpikeStop = t1;
MEG_Channel=GetMEG_Channel(categorical(stringVectors(:,5)));

Spikes_table.SENSOR =categorical(MEG_Channel);
Spikes_table.ECD = categorical(stringVectors(:,6));%data(:,4);
Spikes_table.TypeMEG = categorical(stringVectors(:,7));
Spikes_table.TypeEEG = categorical(stringVectors(:,8));
Spikes_table.SOURCELOCALIZATION = categorical(stringVectors(:,9));
if size(stringVectors,2)>9
Spikes_table.MRILOCALIZATION = stringVectors(:,10);
end

Electrode = data(:,1);
SE =Spikes_table.SE;
Time_spike = Spikes_table.TIME;
Spike_startes = t0;
Spike_stops = t1;

%% How to delete rows that contain NaN in a table

Spikes_table=Spikes_table(~any(ismissing(Spikes_table),2),:);


function [t0,t1]=Get_Start_Stop_Spikes(str_duration)


for k=1:size(str_duration,1)
    
    duration=str_duration(k);
    
    [t0(k),t1(k)]=get_time_borders(duration);
    
     
end
t0=t0';
t1=t1';

d=1;



function [t0,t1]=get_time_borders(duration)

Word=char(duration);
C=strfind(Word,'_');
t0=str2double(Word(1:C-1));
t1=str2double(Word(C+1:end));

d=1;



function MEG_Channel=GetMEG_Channel(list_MEG)

for k=1:size(list_MEG,1)
    Word=char(list_MEG(k));
    C=strfind(Word,'.');
    MEG_Channel(k)=string(Word(1:C-1));
end

MEG_Channel=MEG_Channel';
d=1;

    

